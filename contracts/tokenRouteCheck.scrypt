import "util.scrypt";
import "tokenProto.scrypt";
import "rabinUtil.scrypt";

// opreturn + receiverTokenAmountArray + receiverArray + nReceivers(1 bytes) + tokenContractCodeHash + tokenID
contract TokenRouteCheck {
  int[3] rabinPubKeyArray;

  public function unlock(
    SigHashPreimage txPreimage,
    int nSenders,
    bytes tokenScript,
    bytes prevouts,
    bytes rabinMsgArray,
    bytes rabinPaddingArray,
    bytes rabinSigArray,
    int[2] rabinPubKeyIndexArray,
    bytes inputTokenAddressArray,
    bytes inputTokenAmountArray,
    bytes receiverSatoshiArray,
    int changeSatoshis,
    Ripemd160 changeAddress
  ) {

    require(Tx.checkPreimage(txPreimage));

    require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

    bytes scriptCode = Util.scriptCode(txPreimage);
    int scriptLen = len(scriptCode);
    bytes tokenID = scriptCode[scriptLen - TokenProto.TOKEN_ID_LEN: ];

    int tokenScriptLen = len(tokenScript);
    int pos = TokenProto.TOKEN_ID_LEN + 20;
    bytes tokenCodeHash = scriptCode[scriptLen - pos: scriptLen - TokenProto.TOKEN_ID_LEN];
    require(tokenCodeHash == TokenProto.getContractCodeHash(tokenScript, tokenScriptLen));

    int nReceivers = Util.fromLEUnsigned(scriptCode[scriptLen - pos - 1: scriptLen - pos]);
    pos += 1;

    bytes receiverArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_ADDRESS_LEN: scriptLen - pos];
    pos += nReceivers * TokenProto.TOKEN_ADDRESS_LEN;

    bytes receiverTokenAmountArray = scriptCode[scriptLen - pos - nReceivers * TokenProto.TOKEN_AMOUNT_LEN: scriptLen - pos];

    int i = 0;
    int sumInputToken = 0;
    int paddingPos = 0;
    require(rabinPubKeyIndexArray[0] != rabinPubKeyIndexArray[1]);
    require(nSenders <= 3);
    // max support loop num input token
    loop(3) {
      if (i < nSenders) {
        // verify rabin signature
        bytes rabinMsg = rabinMsgArray[i * RabinUtil.U4_RABIN_MSG_LEN: (i + 1) * RabinUtil.U4_RABIN_MSG_LEN];
        int verifyCount = 0;
        int j = 0;
        loop(2) {
          int pubIndex = rabinPubKeyIndexArray[j];
          int rabinPubKey = this.rabinPubKeyArray[pubIndex];
          int arrayIndex = i * 2 + j;
          int rabinSig = Util.fromLEUnsigned(rabinSigArray[arrayIndex * RabinUtil.RABIN_SIG_LEN: (arrayIndex + 1) * RabinUtil.RABIN_SIG_LEN]);
          int paddingLen = Util.fromLEUnsigned(rabinPaddingArray[paddingPos: paddingPos + RabinUtil.PADDING_SIZE_LEN]);
          bytes padding = b'';
          if (paddingLen > 0) {
            padding = rabinPaddingArray[paddingPos + RabinUtil.PADDING_SIZE_LEN: paddingPos + RabinUtil.PADDING_SIZE_LEN + paddingLen];
          }
          paddingPos += RabinUtil.PADDING_SIZE_LEN + paddingLen;
          int h = RabinUtil.rabinHash(rabinMsg + padding);
          if ((rabinSig * rabinSig) % rabinPubKey == h % rabinPubKey) {
            verifyCount += 1;
          }
          j += 1;
        }
        require(verifyCount == 2);

        PayloadU4Data u4 = RabinUtil.loadPayloadU4(rabinMsg);
        require(u4.outpoint == prevouts[i * 36: (i + 1) * 36]);

        bytes address = inputTokenAddressArray[i * 20: (i + 1) * 20];
        int amount = Util.fromLEUnsigned(inputTokenAmountArray[i * 8: (i + 1) * 8]);
        bytes lockingScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, amount);

        require(hash160(lockingScript) == u4.scriptHash);
        require(tokenID == TokenProto.getTokenID(lockingScript, tokenScriptLen));

        sumInputToken = sumInputToken + amount;
      }
      i = i + 1;
    }

    // check the outputs
    bytes outputs = b'';
    // max support loop num receiver, you can change this num, but will cause the contrac size increase. you can customize your output
    i = 0;
    int sumOutputToken = 0;
    require(nReceivers <= 3);
    loop(3) {
      if (i < nReceivers) {
        bytes address = receiverArray[i * TokenProto.TOKEN_ADDRESS_LEN: (i + 1) * TokenProto.TOKEN_ADDRESS_LEN];
        int tokenAmount = Util.fromLEUnsigned(receiverTokenAmountArray[i * TokenProto.TOKEN_AMOUNT_LEN: (i + 1) * TokenProto.TOKEN_AMOUNT_LEN]);
        sumOutputToken = sumOutputToken + tokenAmount;
        bytes outputScript = TokenProto.getNewTokenScript(tokenScript, tokenScriptLen, address, tokenAmount);
        int outputSatoshi = Util.fromLEUnsigned(receiverSatoshiArray[i * 8: (i + 1) * 8]);
        bytes output = Util.buildOutput(outputScript, outputSatoshi);
        outputs = outputs + output;
      }
      i = i + 1;
    }
    require(sumInputToken == sumOutputToken);
    if (changeSatoshis > 0) {
      bytes outputScript = Util.buildPublicKeyHashScript(changeAddress);
      bytes output = Util.buildOutput(outputScript, changeSatoshis);
      outputs = outputs + output;
    }
    bytes hashOutputs = hash256(outputs);
    require(hashOutputs == Util.hashOutputs(txPreimage));
  }
}
